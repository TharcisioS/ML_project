TUTORIAL 1 - PROJECT STRUCTURE SETUP.PY

1- Set up GitHub repository
* new environment
	create folder
	open folder on vscode - done through anaconda prompt (>> cd "folder path" >> code .)
	create venv in the project folder - done through vscode terminal (>> onda create -p venv python==3.11 -y)
	activate venv (>> conda activate venv/)
	inicialize git instance (>> git init)
	create README.md on the folder
	git add readme file (>> git add README.md)
	commit the changes with message 
"First commit" (>> git commit -m "First commit")
	make sure main branch is selected (>> git branch -M main)
	make sure that the folderis in synch with the GitHub repository by adding an origin (>> git remote add origin https://github.com/TharcisioS/ML_project.git)
	check origin (>> git remote -v)
	configure git global by informing credentials, if not configured
	push commits (>> git push -u origin main)
	create .gitignore directly on GitHub (> new file > .gitignore > choose python template > commit)
	pull the changes back to the local folder (>> git pull)
	


* setup.py
	Works for building the ML application as a package
	create setup.py file 
	import from setuptools (find_packages and setup)
	write function for reading requirements.txt
	configure setup function


* requirements.txt
	It's the list of required packages. Will be used by setup.py
	create txt file
	list the required packages
	link file to setup.py by adding "-e ." at its end.
	install the packages with pip (>> pip install -r requirements.txt)

	after that  the folder MLproject.egg-info will be created
	add the changes (>> git add .)
	commit it (>> git commit -m "setup")
	and push (>> git push -u origin main)




TUTORIAL 1 - PROJECT STRUCTURE src folder

Every folder concerning the project structure must have a __ini__.py file so it can be imported as a class

[src
	[components
		__init__.py
		data_ingestion.py
		data_transformation.py
		model_trainer.py
	[pipeline
		__init__.py
		predict_pipeline.py
		train_pipeline.py
	__init__.py
	exception.py  #haldles exceptions, use with try/catch
	logger.py  # saves the logs into a file for tracking executions
	utils.py










	